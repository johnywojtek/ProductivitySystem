{"version":3,"sources":["App/components/Checkbox.js","App/components/Task.js","Pages/Main/WeekPlan.js"],"names":["icon","keyframes","_templateObject","check","_templateObject2","Container","styled","div","_templateObject3","LabelCheck","span","_templateObject4","_ref","checked","css","_templateObject5","connect","toggleTask","_ref2","taskId","currentTaskId","isDone","react_default","a","createElement","onClick","Swal","fire","title","toast","position","showConfirmButton","timer","timerProgressBar","index_esm","Number","Task_templateObject","Card","props","value","number","refe","Object","assign","ref","className","Task_Number","components_Checkbox","getItems","count","offset","arguments","length","undefined","Array","from","v","k","map","id","concat","Date","getTime","content","reorder","list","startIndex","endIndex","result","_result$splice","splice","removed","_Users_admin_Desktop_EWS_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","_sourceClone$splice","index","droppableId","getItemStyle","isDragging","draggableStyle","_Users_admin_Desktop_EWS_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","userSelect","padding","grid","margin","background","getListStyle","isDraggingOver","width","compose","state","auth","firebase","tasks","firestore","ordered","weeklyTasks","addWeeklyTasks","firestoreConnect","uid","collection","where","_useState","useState","_useState2","setState","useEffect","addionalTasks","importantTasks","secondaryTasks","completedTasks","react__WEBPACK_IMPORTED_MODULE_3___default","console","log","type","_Users_admin_Desktop_EWS_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","data","newItem","now","Math","random","done","createdAt","moment","format","addTask","style","display","react_beautiful_dnd__WEBPACK_IMPORTED_MODULE_10__","onDragEnd","sInd","dInd","items","newState","filter","group","el","ind","key","provided","snapshot","innerRef","droppableProps","item","draggableId","draggableProps","dragHandleProps","justifyContent","placeholder"],"mappings":"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","file":"static/js/33.80b80c95.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled, { keyframes, css } from 'styled-components';\nimport { FaCheck } from 'react-icons/fa';\nimport { toggleTask } from '../../store/actions';\nimport { connect } from 'react-redux';\nimport Swal from 'sweetalert2';\n\nconst icon = keyframes`\n from {\n      opacity: 0;\n      transform: scale(0.3);\n    }\n    to {\n      opacity: 1;\n      transform: scale(1)\n    }\n`;\nconst check = keyframes`\n 0% {\n      width: 2rem;\n      height: 2rem;\n      border-width: 5px;\n    }\n    10% {\n      width: 2rem;\n      height: 2rem;\n      opacity: 0.1;\n      background: rgba(0,0,0,0.2);\n      border-width: 15px;\n    }\n    12% {\n      width: 2rem;\n      height: 2rem;\n      opacity: 0.4;\n      background: rgba(0,0,0,0.1);\n      border-width: 0;\n    }\n    50% {\n      width: 2.3rem;\n      height: 2.3rem;\n      background: #00d478;\n      border: 0;\n      opacity: 0.6;\n    }\n    100% {\n      width: 2.3rem;\n      height: 2.3rem;\n      background: #00d478;\n      border: 0;\n      opacity: 1;\n    }\n`;\n\nconst Container = styled.div`\n    width: 2.3rem;\n    height: 2.3rem;\n`;\n\nconst LabelCheck = styled.span`\n    display: inline-block;\n    border-radius: 50%;\n    border: 2px solid rgba(0, 0, 0, 0.1);\n    background: white;\n    vertical-align: middle;\n    margin-right: 20px;\n    width: 2.3rem;\n    height: 2.3rem;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: border 0.3s ease;\n\n    svg {\n        opacity: 0.2;\n        font-size: 1.3rem;\n        fill: transparent;\n        transition: opacity 0.3s 0.1s ease;\n        stroke: rgba(0, 0, 0, 0.5);\n        stroke-width: 20px;\n        transition: all 0.3s ease;\n    }\n\n    &:hover {\n        border: 3px solid rgba(0, 0, 0, 0.2);\n    }\n    ${({ checked }) =>\n        checked &&\n        css`\n            animation: ${check} 0.5s cubic-bezier(0.895, 0.03, 0.685, 0.22)\n                forwards;\n            svg {\n                opacity: 1;\n                transform: scale(0);\n                fill: white;\n                -webkit-text-stroke: 0;\n                animation: ${icon} 0.3s cubic-bezier(1, 0.008, 0.565, 1.65) 0.1s\n                    1 forwards;\n                stroke: white;\n                stroke-width: 0;\n            }\n        `}\n`;\n\nconst Checkbox = ({ taskId, currentTaskId, isDone, toggleTask }) => {\n    const onCheckboxClick = () => {\n        if (currentTaskId) {\n            isDone\n                ? toggleTask(taskId, currentTaskId, false)\n                : toggleTask(taskId, currentTaskId, true);\n        } else {\n            Swal.fire({\n                icon: 'error',\n                title: 'Ups coś poszło nie tak',\n                toast: true,\n                position: 'top-end',\n                showConfirmButton: false,\n                timer: 1000,\n                timerProgressBar: true,\n            });\n        }\n    };\n    return (\n        <Container onClick={onCheckboxClick}>\n            <LabelCheck checked={isDone}>\n                <FaCheck checked={isDone} />\n            </LabelCheck>\n        </Container>\n    );\n};\n\nexport default connect(\n    null,\n    { toggleTask }\n)(Checkbox);\n","import React, { useRef } from 'react';\nimport styled from 'styled-components';\n\nimport Checkbox from './Checkbox';\n\nconst Number = styled.span`\n    margin-right: 1rem;\n    font-size: 1.3rem;\n`;\n\nconst Container = {\n    border: '1px dashed gray',\n    padding: '0.5rem 1rem',\n    marginBottom: '.5rem',\n    backgroundColor: 'white',\n    cursor: 'move',\n};\nconst Card = (props) => {\n    const { currentTaskId, taskId, value, number, isDone, refe } = props;\n\n    return (\n        <div\n            ref={refe}\n            {...props}\n            className=\"media friendlist-box align-items-center justify-content-center m-b-20\">\n            <Number>{number}</Number>\n            <div className=\"m-r-10 photo-table\">\n                <Checkbox\n                    currentTaskId={currentTaskId}\n                    taskId={taskId}\n                    isDone={isDone}\n                />\n            </div>\n            <div className=\"media-body\">\n                <h6 className=\"m-0 d-inline\">{value}</h6>\n                <span className=\"float-right d-flex  align-items-center\">\n                    <i className=\"fa fa-caret-up f-22 m-r-10 text-c-green\" />\n                    3784\n                </span>\n            </div>\n        </div>\n    );\n};\nexport default Card;\n","import React, { useState, useEffect } from 'react';\nimport { Row, Col, Nav, Tab, Dropdown, SplitButton } from 'react-bootstrap';\nimport styled from 'styled-components';\nimport { FaCheck, FaPlus } from 'react-icons/fa';\nimport Aux from '../../hoc/_Aux';\nimport Task from '../../App/components/Task';\nimport { addWeeklyTasks } from '../../store/actions';\nimport { connect } from 'react-redux';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\n\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport moment from 'moment';\n\n// const InputContainer = styled.div`\n//     display: flex;\n//     align-items: center;\n//     width: 100%;\n//     height: 2rem;\n//     margin-bottom: 1rem;\n//     border: 1px solid black;\n//     border-radius: 4px;\n//     svg {\n//         margin: 0 0.5rem;\n//         font-size: 1rem;\n//         fill: black;\n//         cursor: pointer;\n//         &:hover {\n//             fill: green;\n//         }\n//     }\n// `;\n// const Input = styled.input`\n//     width: 100%;\n//     padding: 0 1rem;\n//     height: auto;\n//     border: none;\n//     font-size: 0.8rem;\n// `;\n// const Dashboard = (props) => {\n//     const [taskValue, setTaskValue] = useState('');\n//     const [key, setKey] = useState(1);\n\n//     const onTaskSubmit = () => {\n//         if (taskValue.length > 0) {\n//             props.addTask(taskValue, key);\n//             setTaskValue('');\n//         } else {\n//             Swal.fire({\n//                 icon: 'error',\n//                 title: 'Dodaj treść zadania',\n//                 toast: true,\n//                 position: 'top-end',\n//                 showConfirmButton: false,\n//                 timer: 1000,\n//                 timerProgressBar: true,\n//             });\n//         }\n//     };\n\n//     // prawdopodobnie do zmiany poniewa tworzy wiele instancji listenera\n//     useEffect(\n//         () => {\n//             const listener = (event) => {\n//                 if (event.code === 'Enter' || event.code === 'NumpadEnter') {\n//                     onTaskSubmit();\n//                 }\n//             };\n//             document.addEventListener('keydown', listener);\n//             return () => {\n//                 document.removeEventListener('keydown', listener);\n//             };\n//         },\n//         [onTaskSubmit]\n//     );\n\n//     // const moveCard = (dragIndex, hoverIndex) => {\n//     //     const dragCard = cards[dragIndex];\n//     //     console.log(dragCard);\n\n//     //     setCards(\n//     //         update(cards, {\n//     //             $splice: [[dragIndex, 1], [hoverIndex, 0, dragCard]],\n//     //         })\n//     //     );\n//     // };\n//     return (\n//         <Aux>\n//             <Tab.Container\n//                 defaultActiveKey={1}\n//                 activeKey={key}\n//                 onSelect={(key) => setKey(parseInt(key))}>\n//                 <Row>\n//                     <Col>\n//                         <Tab.Content activeKey={key}>\n//                             <InputContainer>\n//                                 <Input\n//                                     placeholder=\"Wpisz nazwę zadania\"\n//                                     value={taskValue}\n//                                     onChange={(e) =>\n//                                         setTaskValue(e.target.value)\n//                                     }\n//                                 />\n//                                 <FaPlus onClick={onTaskSubmit} />\n//                             </InputContainer>\n//                             {console.log(props.data)}\n//                             {/* <Tab.Pane> */}\n//                             {/* <DndProvider backend={Backend}> */}\n//                             {props.data.tasks &&\n//                                 props.data.tasks\n//                                     // .filter((e) => e.dayId === key)\n//                                     .map((e, i) => {\n//                                         return (\n//                                             <Task\n//                                                 index={i}\n//                                                 // moveCard={moveCard}\n//                                                 key={e.id}\n//                                                 id={e.id}\n//                                                 value={e.value}\n//                                                 number={i + 1}\n//                                                 done={e.done}\n//                                             />\n//                                         );\n//                                     })}\n//                             {/* </DndProvider> */}\n//                             {/* </Tab.Pane> */}\n//                         </Tab.Content>\n//                     </Col>\n//                 </Row>\n//             </Tab.Container>\n//         </Aux>\n//     );\n// };\n\n// fake data generator\nconst getItems = (count, offset = 0) =>\n    Array.from({ length: count }, (v, k) => k).map((k) => ({\n        id: `item-${k + offset}-${new Date().getTime()}`,\n        content: `item ${k + offset}`,\n    }));\n\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n\n    return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid * 2,\n    margin: `0 0 ${grid}px 0`,\n\n    // change background colour if dragging\n    background: isDragging ? 'lightgreen' : 'grey',\n\n    // styles we need to apply on draggables\n    ...draggableStyle,\n});\nconst getListStyle = (isDraggingOver) => ({\n    background: isDraggingOver ? 'lightblue' : 'lightgrey',\n    padding: grid,\n    width: 250,\n});\n\nfunction QuoteApp(props) {\n    const [state, setState] = useState([getItems(10), getItems(5, 10)]);\n    useEffect(\n        () => {\n            if (props.tasks) {\n                setState([\n                    props.tasks[0].addionalTasks,\n                    props.tasks[0].importantTasks,\n                    props.tasks[0].secondaryTasks,\n                    props.tasks[0].completedTasks,\n                ]);\n            }\n        },\n        [props.tasks]\n    );\n\n    function onDragEnd(result) {\n        const { source, destination } = result;\n\n        // dropped outside the list\n        if (!destination) {\n            return;\n        }\n        const sInd = +source.droppableId;\n        const dInd = +destination.droppableId;\n\n        if (sInd === dInd) {\n            const items = reorder(state[sInd], source.index, destination.index);\n            const newState = [...state];\n            newState[sInd] = items;\n            setState(newState);\n        } else {\n            const result = move(state[sInd], state[dInd], source, destination);\n            const newState = [...state];\n            newState[sInd] = result[sInd];\n            newState[dInd] = result[dInd];\n\n            setState(newState.filter((group) => group.length));\n        }\n    }\n\n    const addTask = (value) => {\n        console.log(props.data);\n        const newItem = {\n            id: Date.now() + Math.random() + '',\n            value: 'test 2',\n            done: false,\n            createdAt: moment().format(),\n        };\n\n        props.addWeeklyTasks(\n            [newItem],\n            'addionalTasks',\n            'IntkmyHyJ7LEklR63Xkr'\n        );\n    };\n\n    return (\n        <div>\n            {console.log(state)}\n            <button\n                type=\"button\"\n                onClick={() => {\n                    setState([...state, []]);\n                }}>\n                Add new group\n            </button>\n            <button\n                type=\"button\"\n                onClick={() => {\n                    // setState([...state, getItems(1)]);\n                    addTask();\n                }}>\n                Add new item\n            </button>\n\n            <div style={{ display: 'flex' }}>\n                <DragDropContext onDragEnd={onDragEnd}>\n                    {state.map((el, ind) => (\n                        <Droppable key={ind} droppableId={`${ind}`}>\n                            {(provided, snapshot) => (\n                                <div\n                                    ref={provided.innerRef}\n                                    style={getListStyle(\n                                        snapshot.isDraggingOver\n                                    )}\n                                    {...provided.droppableProps}>\n                                    {el.map((item, index) => (\n                                        <Draggable\n                                            key={item.id}\n                                            draggableId={item.id}\n                                            index={index}>\n                                            {(provided, snapshot) => (\n                                                <div\n                                                    ref={provided.innerRef}\n                                                    {...provided.draggableProps}\n                                                    {...provided.dragHandleProps}\n                                                    style={getItemStyle(\n                                                        snapshot.isDragging,\n                                                        provided.draggableProps\n                                                            .style\n                                                    )}>\n                                                    <div\n                                                        style={{\n                                                            display: 'flex',\n                                                            justifyContent:\n                                                                'space-around',\n                                                        }}>\n                                                        {item.content}\n                                                        <button\n                                                            type=\"button\"\n                                                            onClick={() => {\n                                                                const newState = [\n                                                                    ...state,\n                                                                ];\n                                                                newState[\n                                                                    ind\n                                                                ].splice(\n                                                                    index,\n                                                                    1\n                                                                );\n                                                                setState(\n                                                                    newState.filter(\n                                                                        (\n                                                                            group\n                                                                        ) =>\n                                                                            group.length\n                                                                    )\n                                                                );\n                                                            }}>\n                                                            delete\n                                                        </button>\n                                                    </div>\n                                                </div>\n                                            )}\n                                        </Draggable>\n                                    ))}\n                                    {provided.placeholder}\n                                </div>\n                            )}\n                        </Droppable>\n                    ))}\n                </DragDropContext>\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        auth: state.firebase.auth,\n        tasks: state.firestore.ordered.weeklyTasks,\n    };\n};\n\nexport default compose(\n    connect(\n        mapStateToProps,\n        { addWeeklyTasks }\n    ),\n    firestoreConnect((props) => {\n        if (!props.auth.uid) return [];\n        return [\n            {\n                collection: 'weeklyTasks',\n                where: [['uid', '==', props.auth.uid]],\n            },\n        ];\n    })\n)(QuoteApp);\n"],"sourceRoot":""}